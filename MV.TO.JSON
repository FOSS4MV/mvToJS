* The MIT License (MIT)
*
* Copyright (c) 2014 Kevin Powick
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* End of License --------------------------------------------------------------

* MV.TO.JSON will convet a given dynamic array (DYN.ARRAY) to a correctly
* formatted JSON array (JSON.ARRAY).  This code only formats the dynamic array
* to JSON.  To Ensure your array is valid JSON, your own code must consider
* escaping string values such as quotations marks, slashes, backslashes, etc.

* This code is most suited for use in subroutines or functions.
* The code has only been tested with D3, but should be generic enough to work
* on most any MV platform

FORCE.THREE.DIMENSIONS = 1
* (0/1) Force output of a 3 dimensional JSON array. e.g. array[][][]
* Useful for emulating MV data model in JSON. i.e. REC<ATTR,VALUE,SUBVALUE>.
* This makes it easier to write JavaScript functions that interate over the
* data in a consistent fasion.

MAX.ATTRIBUTES = DCOUNT(DYN.ARRAY, @AM)
JSON.ARRAY = '['
FOR A.POS = 1 TO MAX.ATTRIBUTES
	IF A.POS > 1 THEN JSON.ARRAY := ', '
	A.VALUE = DYN.ARRAY<A.POS>
	MAX.VALUES = DCOUNT(A.VALUE, @VM)
	IF MAX.VALUES = 0 THEN MAX.VALUES = 1
	IF MAX.VALUES > 1 THEN JSON.ARRAY := '['
	FOR V.POS = 1 TO MAX.VALUES
		V.VALUE = A.VALUE<1,V.POS>
		IF V.POS > 1 THEN JSON.ARRAY := ', '
		MAX.SUBVALUES = DCOUNT(V.VALUE, @SVM)
		IF MAX.SUBVALUES = 0 THEN MAX.SUBVALUES = 1
		IF MAX.SUBVALUES > 1 OR FORCE.THREE.DIMENSIONS THEN
			IF MAX.VALUES = 1 THEN JSON.ARRAY := '['
			JSON.ARRAY := '['
		END
		FOR S.POS = 1 TO MAX.SUBVALUES
			IF S.POS > 1 THEN JSON.ARRAY := ', '
			S.VALUE = V.VALUE<1,1,S.POS>
			IF S.VALUE # '' AND NUM(S.VALUE) THEN
				JSON.ARRAY := S.VALUE
			END ELSE
				JSON.ARRAY := '"':S.VALUE:'"'
			END
		NEXT S.POS
		IF MAX.SUBVALUES > 1 OR FORCE.THREE.DIMENSIONS THEN
			JSON.ARRAY := ']'
			IF MAX.VALUES = 1 THEN JSON.ARRAY := ']'
		END
	NEXT V.POS
	IF MAX.VALUES > 1 THEN JSON.ARRAY := ']'
NEXT A.POS
JSON.ARRAY := ']'